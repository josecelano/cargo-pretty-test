//! This crate can be used as a binary or a library.
//!
//! * library: [parse the output from `cargo test`][crate::parsing]
//! * binary: `cargo install cargo-pretty-test`
//!
//! ```text
//! $ cargo pretty-test --workspace --no-fail-fast
//!      Running `target/debug/cargo-pretty-test --workspace --no-fail-fast`
//! failures:
//!
//! ---- submod::panic::panicked stdout ----
//! thread 'submod::panic::panicked' panicked at tests/integration/src/lib.rs:9:13:
//! explicit panic
//! note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
//!
//! ---- submod::panic::should_panic_but_didnt stdout ----
//! note: test did not panic as expected
//!
//! failures:
//!     submod::panic::panicked
//!     submod::panic::should_panic_but_didnt
//!
//! *************************************************************
//!
//! Generated by cargo-pretty-test
//! ├── cargo_pretty_test
//! │   ├── tests/golden_master_test.rs
//! │   │   └─ ✅ golden_master_test
//! │   ├── tests/mocking_project.rs
//! │   │   ├─ ✅ snapshot_testing_for_parsed_output
//! │   │   └─ ✅ snapshot_testing_for_pretty_output
//! │   └── tests/parsing.rs
//! │       └─ ✅ parse_stderr_stdout
//! ├── integration
//! │   ├── src/lib.rs
//! │   │   ├── submod
//! │   │   │   ├─ 🔕 ignore
//! │   │   │   ├─ 🔕 ignore_without_reason
//! │   │   │   ├─ ✅ normal_test
//! │   │   │   └── panic
//! │   │   │       ├─ ❌ panicked
//! │   │   │       ├─ ✅ should_panic - should panic
//! │   │   │       ├─ ❌ should_panic_but_didnt - should panic
//! │   │   │       └─ ✅ should_panic_without_reanson - should panic
//! │   │   └─ ✅ works
//! │   ├── src/main.rs
//! │   │   └─ ✅ from_main_rs
//! │   └── tests/parsing.rs
//! │       └─ ✅ from_integration
//! └── Doc
//!     ├── cargo-pretty-test
//!     │   └─ ✅ src/doc.rs - doc (line 3)
//!     └── integration
//!         └─ ✅ tests/integration/src/lib.rs - doc (line 41)
//!
//!
//! Icon Notation:
//! ─ ✅ pass (including the case that should panic and did panic)
//! ─ ❌ fail (including the case that should panic but didn't panic)
//! ─ 🔕 ignored (with reason omitted)
//! ```

#![allow(
    clippy::missing_panics_doc,
    clippy::must_use_candidate,
    clippy::enum_glob_use
)]

#[doc(hidden)]
pub mod doc;

pub mod fetch;
pub mod parsing;
pub mod prettify;
pub mod regex;
